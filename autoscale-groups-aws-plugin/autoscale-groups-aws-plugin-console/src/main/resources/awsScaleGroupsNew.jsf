<!composition template="/templates/default.layout"  guiTitle="Create AWS Scaling Group">
    <!define name="content">
        <event>
            <!beforeCreate
                setSessionAttribute(key="autoScaleGroupsTabs" value="awsScaleGroupsTab");
                getRequestValue(key="scalingGroupName" value="#{pageSession.scalingGroupName}");
                urlencode(value="#{pageSession.scalingGroupName}" encoding="UTF-8" result="#{pageSession.encodedScalingGroupName}");
                getRequestValue(key="dgName" value="#{pageSession.dgName}");
                urlencode(value="#{pageSession.dgName}" encoding="UTF-8" result="#{pageSession.encodedDGName}");
                setPageSessionAttribute(key="selfPage",
                        value="#{request.contextPath}/awsScaleGroups/awsScaleGroupsNew.jsf?scalingGroupName=#{pageSession.encodedScalingGroupName}&dgName=#{pageSession.encodedDGName}");
                setPageSessionAttribute(key="listPage",
                        value="#{request.contextPath}/awsScaleGroups/awsScaleGroupsList.jsf?scalingGroupName=#{pageSession.encodedScalingGroupName}&dgName=#{pageSession.encodedDGName}");
                setPageSessionAttribute(key="parentPage", value="#{request.contextPath}/cluster/dg/dgs.jsf");

                createMap(result="#{pageSession.valueMap}");

                gf.getChildrenNamesList(endpoint="#{sessionScope.REST_URL}/configs/config",
                        result="#{requestScope.tmpList}");
                listRemove(list="#{requestScope.tmpList}" value="server-config" result="#{pageSession.configRefsList}");
                listRemove(list="#{requestScope.tmpList}" value="default-config" result="#{pageSession.configRefsList}");

                gf.getChildrenNamesList(endpoint="#{sessionScope.REST_URL}/deployment-groups/deployment-group",
                        result="#{pageSession.deploymentGroupRefsList}");
                py.getValidInstanceTypes(result="#{pageSession.instanceTypesRefsList}");
                py.getValidRegions(result="#{pageSession.regionRefsList}");
            />
        </event>
        <sun:form id="propertyForm">

#include "/cluster/dg/dgTabs.inc"
#include "/autoScaleGroups/autoScaleGroupsTabs.inc"
#include "/common/shared/alertMsg_1.inc"
            <!-- Page Title -->
            <sun:title id="propertyContentPage" title="New AWS Scaling Group"
                       helpText="Create a AWS AutoScale Group">
                <!facet pageButtonsTop>
                    <sun:panelGroup id="topButtons">
                        <sun:button id="newButton" text="$resource{i18n.button.OK}"
                                    onClick="if (guiValidate('#{reqMsg}','#{reqInt}','#{reqPort}')) {submitAndDisable(this, '$resource{i18n.button.Processing}');}; return false;">
                            <!command
                                gf.restRequest(endpoint="#{sessionScope.REST_URL}/scaling-groups/create-aws-scaling-group",
                                        attrs="#{pageSession.valueMap}");
                                prepareSuccessfulMsg();
                                gf.redirect(page="#{pageSession.listPage}&alertType=${alertType}&alertSummary=${alertSummary}&alertDetail=${alertDetail}");
                            />
                        </sun:button>
                    </sun:panelGroup>
                </facet>
            </sun:title>
            <sun:propertySheet id="newScalingGroupSheet">
                <sun:propertySheetSection>
                    <sun:property id="nameProp" labelAlign="left" noWrap="#{true}" overlapLabel="#{false}" label="Name:"
                                  helpText="The name of the Scaling Group">
                        <sun:textField id="nameText" columns="$int{60}" required="#{true}"
                                       text="#{pageSession.valueMap['name']}" styleClass="required"/>
                    </sun:property>
                    <sun:property id="configRefProp" labelAlign="left" noWrap="#{true}" overlapLabel="#{false}"
                                  label="Config:"
                                  helpText="The config new instances creating while scaling will use">
                        <sun:dropDown id="configRefDrop" selected="#{pageSession.valueMap['config']}"
                                labels="$pageSession{configRefsList}"  values="$pageSession{configRefsList}"
                                required="#{true}" styleClass="required">
                        </sun:dropDown>
                    </sun:property>
                    <sun:property id="deploymentGroupRefProp" labelAlign="left" noWrap="#{true}" overlapLabel="#{false}"
                                  label="Deployment Group:"
                                  helpText="The deployment group this scaling group is attached to">
                        <sun:dropDown id="deploymentGroupRefDrop" selected="#{pageSession.valueMap['deploymentGroup']}"
                                labels="$pageSession{deploymentGroupRefsList}"  values="$pageSession{deploymentGroupRefsList}"
                                required="#{true}" styleClass="required">
                        </sun:dropDown>
                    </sun:property>
                    <sun:property id="regionRefProp" labelAlign="left" noWrap="#{true}" overlapLabel="#{false}"
                                  label="Region:"
                                  helpText="The EC2 Region to create Instances in">
                        <sun:dropDown id="regionRefDrop" selected="#{pageSession.valueMap['region']}"
                                      labels="$pageSession{regionRefsList}"  values="$pageSession{regionRefsList}"
                                      required="#{true}" styleClass="required">
                        </sun:dropDown>
                    </sun:property>
                    <sun:property id="instanceTypeRefProp" labelAlign="left" noWrap="#{true}" overlapLabel="#{false}"
                                  label="Instance Type:"
                                  helpText="The EC2 Instance Type to scale on">
                        <sun:dropDown id="instanceTypeRefDrop" selected="#{pageSession.valueMap['instance-type']}"
                                      labels="$pageSession{instanceTypesRefsList}"  values="$pageSession{instanceTypesRefsList}"
                                      required="#{true}" styleClass="required">
                        </sun:dropDown>
                    </sun:property>
                    <sun:property id="amiIdProp" labelAlign="left" noWrap="#{true}" overlapLabel="#{false}" label="AMI ID:"
                                  helpText="The EC2 AMI ID of the Scaling Group - must start with 'ami-'">
                        <sun:textField id="amiIdText" columns="$int{60}" required="#{true}"
                                       text="#{pageSession.valueMap['ami-id']}" styleClass="required"/>
                    </sun:property>
                    <sun:property id="securityGroupProp" labelAlign="left" noWrap="#{true}" overlapLabel="#{false}" label="Security Group:"
                                  helpText="The EC2 Security Group of the Scaling Group - must start with 'sg-'">
                        <sun:textField id="securityGroupText" columns="$int{60}" required="#{true}"
                                       text="#{pageSession.valueMap['security-group']}" styleClass="required"/>
                    </sun:property>
                    <sun:property id="minInstancesProp" labelAlign="left" noWrap="#{true}" overlapLabel="#{false}" label="Min Instances:"
                                  helpText="The minimum number of EC2 Instances">
                        <sun:textField id="minInstancesText" columns="$int{60}" required="#{true}"
                                       text="#{pageSession.valueMap['min-instances']}" styleClass="required"/>
                    </sun:property>
                    <sun:property id="maxInstancesProp" labelAlign="left" noWrap="#{true}" overlapLabel="#{false}" label="Max Instances:"
                                  helpText="The maximum number of EC2 Instances">
                        <sun:textField id="maxInstancesText" columns="$int{60}" required="#{true}"
                                       text="#{pageSession.valueMap['max-instances']}" styleClass="required"/>
                    </sun:property>
                    <sun:property id="payaraInstallDirProp" labelAlign="left" noWrap="#{true}" overlapLabel="#{false}" label="Payara Install Dir:"
                                  helpText="The Payara Installation Directory on the AMI">
                        <sun:textField id="payaraInstallDirText" columns="$int{60}" required="#{true}"
                                       text="#{pageSession.valueMap['payara-install-dir']}" styleClass="required"/>
                    </sun:property>
                    <sun:property id="passwordFilePathProp" labelAlign="left" noWrap="#{true}" overlapLabel="#{false}" label="Password File Path:"
                                  helpText="The Password File Path on the AMI">
                        <sun:textField id="passwordFilePathText" columns="$int{60}" required="#{true}"
                                       text="#{pageSession.valueMap['password-file-path']}" styleClass="required"/>
                    </sun:property>
                </sun:propertySheetSection>
            </sun:propertySheet>
        </sun:form>
    </define>
</composition>